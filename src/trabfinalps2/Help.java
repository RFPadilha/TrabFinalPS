/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trabfinalps2;

/**
 *
 * @author Meu computador
 */
public class Help extends javax.swing.JFrame {

    /**
     * Creates new form Help
     */
    public Help() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        Usar = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        Editor = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        Salvar = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        Instr = new javax.swing.JScrollPane();
        InstrArea = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        Sobre = new javax.swing.JScrollPane();
        Licencas = new javax.swing.JScrollPane();
        Comandos = new javax.swing.JScrollPane();
        Historia = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("68KARS | Ajuda");
        setResizable(false);

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        Usar.setViewportView(jTextArea2);

        jTabbedPane4.addTab("Como Usar", Usar);

        jTextPane1.setEditable(false);
        Editor.setViewportView(jTextPane1);

        jTabbedPane4.addTab("Editor", Editor);

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        Salvar.setViewportView(jTextArea3);

        jTabbedPane4.addTab("Salvar", Salvar);

        jTabbedPane1.addTab(" Primeiros Passos ", jTabbedPane4);

        InstrArea.setEditable(false);
        InstrArea.setColumns(20);
        InstrArea.setFont(new java.awt.Font("Ubuntu", 0, 10)); // NOI18N
        InstrArea.setRows(5);
        InstrArea.setText("---------------------------------------------------------------------\nObs.: tradu√ßao indisponivel, por hora.\n---------------------------------------------------------------------\n                                                                                                             \n                                          Assembler   Data\nInstruction Description                    Syntax     Size  X N Z V C\n-----------------------                   ---------   ----  ---------\n\nADD      ADD binary                        Dx,Dy       BWL  * * * * *\n                                                                   Dn,<ea>\n\t\t\t\t\t   <ea>,Dn\n\nADDA     ADD binary to An                  Rn,An       -WL  - - - - -\n\t\t\t\t\t   <ea>,An\n\nADDI     ADD Immediate                     #x,Dn       BWL  * * * * *\n\t\t\t\t\t   #x,<ea>\n\t\t\t\t\t   #x,An       -W   - - - - -\n\nADDQ     ADD 3-bit immediate             #<1-8>,Dn     BWL  * * * * *\n\t\t\t\t \t #<1-8>,<ea>\n\t\t\t\t\t #<1-8>,An     -WL  - - - - -\n\nADDX     ADD eXtended                       Dy,Dx      BWL  * * * * *\n                                                                              -(Ay),-(Ax)\n\nAND      Bit-wise AND                      Dx,Dy       BWL  - * * 0 0\n                                                                      <ea>,Dn\n\t\t\t\t\t   Dn,<ea>\n\nANDI     Bit-wise AND with Immediate    #<data>,Dn     BWL  - * * 0 0\n\t\t                    #<data>,<ea>\n\nASL      Arithmetic Shift Left            #<1-8>,Dy    BWL  * * * * *\n                                            \t    Dx,Dy\n                                            \t    <ea>\n\nASR      Arithmetic Shift Right              ...       BWL  * * * * *\n\nBcc      Conditional Branch            Bcc.B <label>   BW-  - - - - -\n                                       \tBcc.W <label>\n\nBCHG     Test a Bit and CHanGe             Dn,<ea>     B-L  - - * - -\n                                        \t           #<data>,<ea>\n\nBCLR     Test a Bit and CLeaR                ...       B-L  - - * - -\n\nBSET     Test a Bit and SET                  ...       B-L  - - * - -\n\nBSR      Branch to SubRoutine          BSR.S <label>   BW-  - - - - -\n                                       \t    BSR.W <label>\n\nBTST     Bit TeST                          Dn,<ea>     B-L  - - * - -\n                                                            #<data>,<ea>\n\nCHK      CHecK Dn Against Bounds           <ea>,Dn     -W-  - * U U U\n\nCLR      CLeaR                              <ea>       BWL  -Dn\n\nCMP      CoMPare                           Dx,Dy       BWL  - * * * *\n\t\t\t\t\t   <ea>,Dn\n\nCMPA     CoMPare Address                   Rn,An       -WL  - * * * *\n\t\t\t\t\t   <ea>,An\n\t\t\t\t\t#<data>,An\n\nCMPI     CoMPare Immediate              #<data>,Dn     BWL  - * * * *\n\t\t\t\t\t#<data>,<ea>\n\nCMPM     CoMPare Memory                  (Ay)+,(Ax)+   BWL  - * * * *\n\nDBcc     Looping Instruction          DBcc Dn,<label>  -W-  - - - - -\n\nDIVS     DIVide Signed                     Dx,Dy       -W-  - * * * 0\n\t\t\t\t\t   <ea>,Dn\n\t\t\t\t\t   #<data>,Dn\n\nDIVU     DIVide Unsigned                   Dx,Dy       -W-  - * * * 0\n\t\t\t\t\t   <ea>,Dn\n\t\t\t\t\t   #<data>,Dn\n\nEOR      Exclusive OR                      Dx,Dy       BWL  - * * 0 0\n\t\t\t\t\t   Dn,<ea>\n\nEORI     Exclusive OR Immediate         #<data>,Dn     BWL  - * * 0 0\n\t\t\t\t\t#<data>,<ea>\n\nEXG      Exchange any two registers         Rx,Ry      --L  - - - - -\n\nEXT      Sign EXTend                         Dn        -WL  - * * 0 0\n\nJMP      JuMP to Affective Address          <ea>            - - - - -\n\nJSR      Jump to SubRoutine                 <ea>            - - - - -\n\nLEA      Load Effective Address            <ea>,An     --L  - - - - -\n\nLSL      Logical Shift Left                 Dx,Dy      BWL  * * * 0 *\n                                          #<1-8>,Dy\n                                            <ea>\n\nLSR      Logical Shift Right                 ...       BWL  * * * 0 *\nMOVE    \t\t\t          Dx,Dy        BWL  - * * 0 0\n\t\t\t\t\t  Rn,Dy        -WL  - * * 0 0\n\t\t\t\t          Dn,<ea>      BWL  - * * 0 0\n\t\t\t\t\t  <ea>,Dn      BWL  - * * 0 0\n\t\t\t\t          <ea>,<ea>    BWL  - * * 0 0\n\t\t\t\t\t  #<data>,Dn   BWL  - * * 0 0\n\t\t\t\t\t  #<data>,<ea> BWL  - * * 0 0\n\nMOVEA    MOVE Address                      Dn,An       -WL  - - - - -\n\t\t\t\t\t   <ea>,An\n\t\t\t\t\t   An,<ea>\n\t\t\t\t\t   #<data>,An\n\nMOVE     To CCR                           <ea>,CCR     -W-  I I I I I\n\nMOVE     To SR                             <ea>,SR     -W-  I I I I I\n\nMOVE     From SR                           SR,<ea>     -W-  - - - - -\n\nMOVE     USP to/from Address Register      USP,An      --L  - - - - -\n                                           An,USP\n\nMOVEM    MOVE Multiple            <register list>,<ea> -WL  - - - - -\n                                  <ea>,<register list>\n\nMOVEQ    MOVE 8-bit immediate         #<-128.+127>,Dn  --L  - * * 0 0\n\nMULS     MULtiply Signed                   Dx,Dy       -W-  - * * 0 0\n\t\t\t\t\t   <ea>,Dn\n\t\t\t\t\t   #<data>,Dn\n\nMULU     MULtiply Unsigned                 Dx,Dy       -W-  - * * 0 0\n\t\t\t\t\t   <ea>,Dn\n\t\t\t\t\t   #<data>,Dn\n\nNEG      NEGate                             Dn         BWL  * * * * *\n\t\t\t\t\t    <ea>\n\nNEGX     NEGate with eXtend                 Dn         BWL  * * * * *\n\t\t\t\t\t    <ea>\n\nNOP      No OPeration                        NOP            - - - - -\n\nNOT      Form one's complement              Dn         BWL  - * * 0 0\n\t\t\t\t\t    <ea>\n\nOR       Bit-wise OR                       <ea>,Dn     BWL  - * * 0 0\n                                           Dn,<ea>\n\t\t\t\t\t   Dx,Dy\n\nORI      Bit-wise OR with Immediate     #<data>,<ea>   BWL  - * * 0 0\n\t\t\t\t\t#<data>,Dn\n\nROL      ROtate Left                      #<1-8>,Dy    BWL  - * * 0 *\n                                            Dx,Dy\n                                            <ea>\n\nROR      ROtate Right                        ...       BWL  - * * 0 *\n\nROXL     ROtate Left with eXtend             ...       BWL  * * * 0 *\n\nROXR     ROtate Right with eXtend            ...       BWL  * * * 0 *\n\nRTE      ReTurn from Exception               RTE            I I I I I\n\nRTR      ReTurn and Restore                  RTR            I I I I I\n\nRTS      ReTurn from Subroutine              RTS            - - - - -\n\nSUBtract SAME as ADDITION      \n\nSWAP     SWAP words of Dn                    Dn        -W-  - * * 0 0\n\nTRAP     Execute TRAP Exception           #<vector>         - - - - -\n\nTRAPV    TRAPV Exception if V-bit Set       TRAPV           - - - - -\n\nTST      TeST for negative or zero          <ea>       BWL  - * * 0 0\n\t\t\t\t\t    Dn\n\nmove.l #228,d7\tTo STOP Execution\n\ntrap   #14\n---------------------------------------------------------------------\n\nSymbol   Meaning\n------   -------\n\n   *     Set according to result of operation\n   -     Not affected\n   0     Cleared\n   1     Set\n   U     Outcome (state after operation) undefined\n   I     Set by immediate data\n\n\nLegend\n------\n   Dn    Data Register        (n is 0-7)\n   An    Address Register     (n is 0-7)\n    b    08-bit constant\n    w    16-bit constant\n    l    32-bit constant\n    x    8-, 16-, 32-bit constant\n   Rn    Any Register, An or Dn\n\n--------------------------------------------------------------------------------\n\n         Condition Codes for Bcc and DBcc Instructions.\n         ---------------------------------------------------\n\n           Condition Codes set after CMP D0,D1 Instruction.\n\nRelationship      Unsigned                         Signed\n------------      --------                         ------\n\nD1 <  D0          CS - Carry Bit Set               LT - Less Than\nD1 <= D0          LS - Lower or Same               LE - Less than or Equal\nD1  = D0          EQ - Equal (Z-bit Set)           EQ - Equal (Z-bit Set)\nD1 != D0          NE - Not Equal (Z-bit Clear)     NE - Not Equal (Z-bit Clear)\nD1 >  D0          HI - HIgher than                 GT - Greater Than\nD1 >= D0          CC - Carry Bit Clear             GE - Greater than or Equal\n\n                  PL - PLus (N-bit Clear)          MI - Minus (N-bit Set)\n                  VC - V-bit Clear (No Overflow)   VS - V-bit Set (Overflow)\n                  RA - BRanch Always\n\nDBcc Only    -     F - Never Terminate (DBRA is an alternate to DBF)\n                   T - Always Terminate\n--------------------------------------------------------------------------------\n");
        Instr.setViewportView(InstrArea);

        jTabbedPane2.addTab("Instru√ß√µes", Instr);
        jTabbedPane2.addTab("tab1", jScrollPane4);

        jTabbedPane1.addTab("Motorola 68K", jTabbedPane2);

        jTabbedPane3.addTab("Sobre", Sobre);
        jTabbedPane3.addTab("Licen√ßas", Licencas);
        jTabbedPane3.addTab("Comandos", Comandos);
        jTabbedPane3.addTab("Historia", Historia);

        jTabbedPane1.addTab("68K.A.R.S.", jTabbedPane3);

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Em caso de Bugs encontrados, favor descrever e enviar um email \npara:\n\t-> lgcoelho@inf.ufpel.edu.br\n\t-> \n\t->\n\t->\n\t->\n\t->");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Bugs", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Help.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Help.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Help.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Help.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Help().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane Comandos;
    private javax.swing.JScrollPane Editor;
    private javax.swing.JScrollPane Historia;
    private javax.swing.JScrollPane Instr;
    private javax.swing.JTextArea InstrArea;
    private javax.swing.JScrollPane Licencas;
    private javax.swing.JScrollPane Salvar;
    private javax.swing.JScrollPane Sobre;
    private javax.swing.JScrollPane Usar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
